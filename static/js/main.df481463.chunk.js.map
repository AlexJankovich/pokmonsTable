{"version":3,"sources":["API/api.ts","Redux/AppReducer.ts","Redux/PokemonsReducer.ts","Redux/CardReducer.ts","components/PokemonCard/PokemonCard.tsx","components/MainPage/MainPage.tsx","Redux/PokemonReducer.ts","components/Pokemon/Pokemon.tsx","App.tsx","reportWebVitals.ts","Redux/Store.ts","index.tsx"],"names":["instance","axios","create","baseURL","PokeApi","id","get","then","res","console","log","status","next","name","AppInitialState","isFetching","pokemonIsFetching","Error","ToggleIsFetching","type","PokemonToggleIsFetching","SetError","error","SetPokemonsData","Data","GetNextPokemons","dispatch","response","data","catch","e","message","finally","cardInitialState","PokemonCard","props","useDispatch","Pokemon","useSelector","state","card","useEffect","ImgUrl","findIndex","i","img","to","style","width","margin","title","cover","src","alt","loading","bordered","hoverable","size","MainPage","Pokemons","pokemons","AppData","app","PokemonsRender","results","map","index","url","className","gutter","xs","sm","md","lg","previous","onClick","disabled","shape","icon","LeftOutlined","RightOutlined","PokemonInitialState","base_experience","height","is_default","order","weight","abilities","is_hidden","slot","ability","forms","game_indices","game_index","version","held_items","item","version_details","rarity","location_area_encounters","moves","move","version_group_details","level_learned_at","version_group","move_learn_method","species","sprites","back_female","back_shiny_female","back_default","front_female","front_shiny_female","back_shiny","front_default","front_shiny","other","dream_world","versions","yellow","crystal","gold","silver","emerald","platinum","icons","stats","base_stat","effort","stat","types","useParams","pokemon","GetNextPokemon","justify","textAlign","direction","Header","Menu","SubMenu","Layout","Content","Footer","Sider","App","theme","mode","defaultSelectedKeys","Item","padding","minHeight","exact","path","render","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","RootReducer","combineReducers","Actions","Object","values","find","v","push","actions","AppState","createStore","applyMiddleware","thunk","window","ReactDOM","StrictMode","store","document","getElementById"],"mappings":"2SAEaA,EAAWC,IAAMC,OAAO,CAACC,QAAS,+BAElCC,EACC,SAACC,GACP,OAAOL,EAASM,IAAT,kBAAwBD,GAAM,uBAAwBE,MAAK,SAAAC,GAE9D,OADAC,QAAQC,IAAIF,EAAIG,QACTH,MAJNJ,EAOI,SAACQ,GACV,OAAOX,IAAMK,IAAIM,GAAML,MAAK,SAAAC,GAAG,OAAEA,MAR5BJ,EAUE,SAACS,GACR,OAAOb,EAASM,IAAT,kBAAwBO,IAAQN,MAAK,SAAAC,GACxC,OAAOA,MChBbM,EAAkB,CACpBC,YAAY,EACZC,mBAAmB,EACnBC,MAAO,IAqBEC,EAAmB,SAACH,GAC7B,MAAO,CACHI,KAAM,yBAA0BJ,eAG3BK,EAA0B,SAACJ,GACpC,MAAO,CACHG,KAAM,iCAAkCH,sBAGnCK,EAAW,SAACC,GACrB,MAAO,CACHH,KAAM,gBAAiBG,UCQlBC,EAAkB,SAACC,GAC5B,MAAO,CACHL,KAAM,6BAA8BK,SA0B/BC,EAAkB,SAACb,GAC5B,OAAO,SAACc,GACJA,EAASR,GAAiB,IAC1Bd,EAAqBQ,GAAML,MAAK,SAAAoB,GACJ,MAApBA,EAAShB,QACTe,EAASH,EAAgBI,EAASC,UAGrCC,OAAM,SAAAC,GAAC,OAAIJ,EAASL,EAASS,EAAEC,aAC/BC,SAAQ,kBAAMN,EAASR,GAAiB,S,iBCrE/Ce,EAAwC,GCCjCC,EAAc,SAACC,GAExB,IAAMT,EAAWU,cACXC,EAAUC,aAAgD,SAAAC,GAAK,OAAIA,EAAMC,QAE/EC,qBAAU,WDea,IAAC5B,ECdpBa,GDcoBb,ECdCsB,EAAMtB,KDgBxB,SAACa,GACJtB,EAAmBS,GAAMN,MAAK,SAAAC,GAET,MAAbA,EAAIG,QACJe,EAfN,CACFP,KAAK,gBAAiBK,KAcOhB,EAAIoB,eCnBlC,CAACF,EAAUS,EAAMtB,OAEpB,IAAI6B,EAAS,GAKb,OAJGL,EAAQA,EAAQM,WAAU,SAAAC,GAAC,OAAEA,EAAE/B,OAAOsB,EAAMtB,WAC3C6B,EAAOL,EAAQA,EAAQM,WAAU,SAAAC,GAAC,OAAEA,EAAE/B,OAAOsB,EAAMtB,SAAOgC,KAGvD,8BACH,cAAC,IAAD,CAASC,GAAI,YAAcX,EAAMtB,KAAjC,SACI,cAAC,IAAD,CACIkC,MAAO,CAACC,MAAO,IAAKC,OAAQ,IAC5BC,MAAOf,EAAMtB,KACbsC,MAAO,qBAAKC,IAAKV,EAAQW,IAAI,KAC7BC,QAAkB,KAATZ,EACTvB,KAAK,QACLoC,UAAQ,EACRC,WAAS,EACTC,KAAK,e,2CC5BRC,EAAW,WAExB,IAAMhC,EAAWU,cAEXuB,EAAWrB,aAAmD,SAAAC,GAAK,OAAIA,EAAMqB,YAE7EC,EAAUvB,aAA+C,SAAAC,GAAK,OAAIA,EAAMuB,OAE9ErB,qBAAU,WACNf,GH2CO,SAACA,GACJtB,IAAmBG,MAAK,SAAAoB,GACI,MAApBA,EAAShB,QACTe,EAASH,EAAgBI,EAASC,UAGrCC,OAAM,SAAAC,GAAC,OAAIJ,EAASL,EAASS,EAAEC,aAC/BC,SAAQ,kBAAMN,EAASR,GAAiB,YGjDlD,CAACQ,IAEJ,IAAMqC,GAAyB,OAARJ,QAAQ,IAARA,OAAA,EAAAA,EAAUK,SAAUL,EAASK,QAAQC,KAAI,SAACrB,EAAGsB,GAChE,OAAO,8BAAiB,cAAC,EAAD,CAAaC,IAAKvB,EAAEuB,IAAKtD,KAAM+B,EAAE/B,KAAkBqD,MAAOA,GAAdA,IAAnDA,MAChB,KAWL,OACI,sBAAKE,UAAU,MAAf,UACKP,EAAQ9C,WAAa,cAAC,IAAD,IAAU,KAChC,qBAAKqD,UAAU,cAAf,SACI,cAAC,IAAD,CAAKC,OAAQ,CAACC,GAAI,EAAGC,GAAI,GAAIC,GAAI,GAAIC,GAAI,IAAzC,SACKV,MAGT,sBAAKK,UAAU,gBAAf,WAAwC,OAART,QAAQ,IAARA,OAAA,EAAAA,EAAUe,UAAW,cAAC,IAAD,CACjDC,QAdW,WACdhB,EAASe,UACdhD,EAASD,EAAgBkC,EAASe,YAa1BE,SAAUf,EAAQ9C,WAClBI,KAAK,UACL0D,MAAM,QACNpB,KAAK,QACLqB,KAAM,cAACC,EAAA,EAAD,MACG,MACA,OAARpB,QAAQ,IAARA,OAAA,EAAAA,EAAU/C,MAAO,cAAC,IAAD,CACd+D,QA1BG,WACVhB,EAAS/C,MACdc,EAASD,EAAgBkC,EAAS/C,QAyBtBgE,SAAUf,EAAQ9C,WAClBI,KAAK,UACL0D,MAAM,QACNpB,KAAK,QACLqB,KAAM,cAACE,EAAA,EAAD,MACG,Y,iBCrDnBC,EAAsB,CACxB5E,GAAI,EACJQ,KAAM,GACNqE,gBAAiB,EACjBC,OAAQ,EACRC,YAAY,EACZC,MAAO,EACPC,OAAQ,EACRC,UAAW,CACP,CACIC,WAAW,EACXC,KAAM,EACNC,QAAS,CACL7E,KAAM,GACNsD,IAAK,MAIjBwB,MAAO,CACH,CACI9E,KAAM,GACNsD,IAAK,KAGbyB,aAAc,CACV,CACIC,WAAY,EACZC,QAAS,CACLjF,KAAM,GACNsD,IAAK,MAIjB4B,WAAY,CACR,CACIC,KAAM,CACFnF,KAAM,GACNsD,IAAK,IAET8B,gBAAiB,CACb,CACIC,OAAQ,GACRJ,QAAS,CACLjF,KAAM,GACNsD,IAAK,QAMzBgC,yBAA0B,GAC1BC,MAAO,CACH,CACIC,KAAM,CACFxF,KAAM,GACNsD,IAAK,IAETmC,sBAAuB,CACnB,CACIC,iBAAkB,EAClBC,cAAe,CACX3F,KAAM,GACNsD,IAAK,IAETsC,kBAAmB,CACf5F,KAAM,GACNsD,IAAK,QAMzBuC,QAAS,CACL7F,KAAM,GACNsD,IAAK,IAETwC,QAAS,CACLC,YAAa,GACbC,kBAAmB,GACnBC,aAAc,SACdC,aAAc,GACdC,mBAAoB,GACpBC,WAAY,GACZC,cAAe,GACfC,YAAa,GACbC,MAAO,CACHC,YAAa,GACb,mBAAoB,CAACH,cAAc,KAEvCI,SAAU,CACP,gBAAiB,CACZ,WAAY,GACZC,OAAQ,IAEZ,gBAAiB,CACbC,QAAS,GACTC,KAAM,GACNC,OAAQ,IAEZ,iBAAkB,CACdC,QAAS,GACT,oBAAqB,GACrB,gBAAiB,IAErB,gBAAiB,CACb,gBAAiB,GACjB,uBAAwB,GACxBC,SAAU,IAEd,eAAgB,CACZ,cAAe,IAEnB,gBAAiB,CACb,0BAA2B,GAC3B,MAAO,IAEX,iBAAkB,CACdC,MAAO,GACP,uBAAwB,IAE5B,kBAAmB,CACfA,MAAO,MAInBC,MAAO,CACH,CACIC,UAAW,EACXC,OAAQ,EACRC,KAAM,CACFpH,KAAM,GACNsD,IAAI,MAIhB+D,MAAO,CACH,CACIzC,KAAM,EACNtE,KAAM,CACFN,KAAM,GACNsD,IAAK,OCzIR9B,EAAU,WAEnB,IAAIxB,EAAyBsH,cAEvB9F,EAAUC,aAA4C,SAAAC,GAAK,OAAIA,EAAM6F,WAErE1G,EAAWU,cAEjBK,qBAAU,WACNf,EDkLsB,SAACb,GAC3B,OAAO,SAACa,GAEJA,EAASN,GAAwB,IACjChB,EAAmBS,GAAMN,MAAK,SAAAoB,GAEF,MAApBA,EAAShB,QACTe,EA9BN,CACFP,KAAK,gCAAiCK,KA6BFG,EAASC,UAExCC,OAAM,SAAAC,GAAC,OAAEJ,EAASL,EAASS,EAAEC,aAC7BC,SAAQ,kBAAIN,EAASN,GAAwB,QC5LzCiH,CAAexH,EAAKA,SAC9B,CAACA,EAAKA,OAET,IAAI6B,EAASL,EAAQsE,QAAUtE,EAAQsE,QAAQS,MAAM,oBAAoBF,cAAgB,GAEzF,OACI,mCACI,cAAC,IAAD,CAAKoB,QAAQ,SAAb,SAAsB,eAAC,IAAD,CAClBvF,MAAO,CAACwF,UAAW,UAEnBjF,QAAoB,KAAXZ,EACTQ,MAAOb,EAAQxB,KACfM,KAAK,QALa,UAOlB,eAAC,IAAD,WAAK,qBAAKiC,IAAKV,EAAQW,IAAI,eACvB,eAAC,IAAD,CAAOmF,UAAW,WAAY/E,KAAM,EAApC,UACI,cAAC,IAAD,CAAMP,MAAM,YAAYH,MAAO,CAACwF,UAAW,UAAWnE,UAAU,aAAhE,SACK/B,EAAQkD,UAAUtB,KAAI,SAACrB,EAAGsB,GAAJ,OAAc,8BAAkBtB,EAAE8C,QAAQ7E,MAAlBqD,QAEnD,cAAC,IAAD,CAAMhB,MAAM,kBAAkBH,MAAO,CAACwF,UAAW,UAAjD,SACKlG,EAAQ6C,kBAEb,cAAC,IAAD,CAAMhC,MAAM,SAASH,MAAO,CAACwF,UAAW,UAAxC,SACKlG,EAAQ8C,SAEb,cAAC,IAAD,CAAMjC,MAAM,SAASH,MAAO,CAACwF,UAAW,UAAxC,SACKlG,EAAQiD,eAGrB,eAAC,IAAD,WACI,cAAC,IAAD,CAAQpC,MAAM,OAAd,SAAqB,cAAC,IAAD,CACjBJ,GAAE,mBAAcT,EAAQhC,GAAK,IAAM,EAAI,EAAIgC,EAAQhC,GAAK,GADvC,wBAErB,cAAC,IAAD,CAAQ6C,MAAM,OAAd,SAAqB,cAAC,IAAD,CAAMJ,GAAE,mBAAcT,EAAQhC,GAAK,GAAnC,oCCvClCoI,GADWC,IAAXC,QACkCC,IAAlCH,QAAQI,EAA0BD,IAA1BC,QAASC,EAAiBF,IAAjBE,OAAiBF,IAATG,MAkEjBC,MAhEf,WACK,OAAO,mCACJ,cAAC,IAAD,UACI,eAAC,IAAD,WACI,eAACP,EAAD,CAAQrE,UAAU,SAAlB,UACI,qBAAKA,UAAU,SACf,eAAC,IAAD,CAAM6E,MAAM,OAAOC,KAAK,aAAaC,oBAAqB,CAAC,KAA3D,UACI,eAAC,IAAKC,KAAN,WAAmB,cAAC,IAAD,CAAMtG,GAAG,cAA5B,cAAe,KACf,eAAC,IAAKsG,KAAN,WAAmB,cAAC,IAAD,CAAMtG,GAAG,eAA5B,iBAAe,WAIvB,eAAC+F,EAAD,CAAS9F,MAAO,CAACsG,QAAS,UAA1B,UACI,eAAC,IAAD,CAAYtG,MAAO,CAACE,OAAQ,UAA5B,UACI,cAAC,IAAWmG,KAAZ,mBACA,cAAC,IAAWA,KAAZ,mBACA,cAAC,IAAWA,KAAZ,qBAEJ,cAAC,IAAD,CAAQhF,UAAU,yBAAyBrB,MAAO,CAACsG,QAAS,UAA5D,SA4BI,cAACR,EAAD,CAAS9F,MAAO,CAACsG,QAAS,QAASC,UAAW,KAA9C,SACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IACXC,OAAQ,kBAAM,cAAC,EAAD,OACrB,cAAC,IAAD,CAAOD,KAAK,YACLC,OAAQ,kBAAM,cAAC,EAAD,OACrB,cAAC,IAAD,CAAOD,KAAK,kBACLC,OAAQ,kBAAM,cAAC,EAAD,iBAKrC,cAACX,EAAD,CAAQ/F,MAAO,CAACwF,UAAW,UAA3B,4DCvDDmB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBrJ,MAAK,YAAkD,IAA/CsJ,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,iBCFRO,EAAcC,YAChB,CACIvG,SRawB,WAAgE,IAA/DrB,EAA8D,uDAjB9D,KAiB6B6H,EAAiC,uCAC3F,OAAQA,EAAQjJ,MACZ,IAAK,6BACD,OAAO,eAAIiJ,EAAQ5I,MAEvB,IAAK,iCAED,OAAO,2BACAe,GADP,IACcyB,QAAQ,YAAKzB,EAAMyB,QAAQC,KAAI,SAACrB,EAAQsB,GACuB,IAAD,IAAhEtB,EAAE/B,OAASwJ,OAAOC,OAAOF,EAAQ5I,MAAM+I,MAAK,SAAAC,GAAC,OAAIA,IAAM5H,EAAE/B,UACzD+B,EAAE6H,MAAe,OAAPL,QAAO,IAAPA,GAAA,UAAAA,EAAS5I,YAAT,mBAAemF,eAAf,SAAwBS,MAAM,oBAAoBF,cAAekD,EAAQ5I,KAAKnB,WAOxG,QACI,OAAOkC,IQ9BXuB,ITFkB,WAA4E,IAA3EvB,EAA0E,uDAA7CzB,EAAiBsJ,EAA4B,uCACjG,OAAQA,EAAQjJ,MACZ,IAAK,yBACD,OAAO,2BAAIoB,GAAX,IAAkBxB,WAAYqJ,EAAQrJ,aAE1C,IAAK,iCACD,OAAO,2BAAIwB,GAAX,IAAkBxB,WAAYqJ,EAAQpJ,oBAE1C,IAAK,gBACD,OAAO,2BAAIuB,GAAX,IAAkBxB,WAAYqJ,EAAQ9I,QAE1C,QACI,OAAOiB,ISTX6F,QJ6IsB,WAA4E,IAA3E7F,EAA0E,uDAApE0C,EAAoByF,EAAgD,uCACrG,OAAQA,EAAQvJ,MACZ,IAAK,2BAGL,IAAK,gCAED,OAAO,eAAIuJ,EAAQlJ,MAEvB,QAAS,OAAOe,IIrJhBC,KPEmB,WAAwE,IAAvED,EAAsE,uDAA9DN,EAAkByI,EAA4C,uCAC9F,OAAQA,EAAQvJ,MACZ,IAAK,gBACD,MAAM,GAAN,mBAAUoB,GAAV,CAAgB,CAAC1B,KAAK6J,EAAQlJ,KAAKX,KAAMgC,IAAI6H,EAAQlJ,KAAKmF,QAAQS,MAAM,oBAAoBF,cAAe7G,GAAGqK,EAAQlJ,KAAKnB,MAE/H,QAAS,OAAOkC,MODXoI,EAAWC,YAAYV,EAAaW,YAAgBC,MAIjEC,OAAOJ,SAAWA,ECdlBK,IAASvB,OACL,cAAC,IAAMwB,WAAP,UACI,cAAC,IAAD,CAAUC,MAAOP,EAAjB,SACI,cAAC,EAAD,QAGRQ,SAASC,eAAe,SAM5B1B,M","file":"static/js/main.df481463.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nexport const instance = axios.create({baseURL: 'https://pokeapi.co/api/v2/'})\r\n\r\nexport const PokeApi = {\r\n    PokesGet: (id?: number) => {\r\n        return instance.get(`pokemon/${id || '?limit=20&offset=0'}`).then(res => {\r\n            console.log(res.status)\r\n            return res\r\n        })\r\n    },\r\n    PokesNextGet:(next:string) =>{\r\n        return axios.get(next).then(res=>res)\r\n    },\r\n    PokemonGet:(name:string)=>{\r\n        return instance.get(`pokemon/${name}`).then(res=> {\r\n            return res\r\n        })\r\n\r\n    }\r\n}","const AppInitialState = {\r\n    isFetching: false,\r\n    pokemonIsFetching: false,\r\n    Error: ''\r\n}\r\n\r\nexport type AppInitialStateType = typeof AppInitialState\r\n\r\nexport const AppReducer = (state: AppInitialStateType = AppInitialState, Actions: AppActionTypes) => {\r\n    switch (Actions.type) {\r\n        case \"APP/TOGGLE-IS-FETCHING\": {\r\n            return {...state, isFetching: Actions.isFetching}\r\n        }\r\n        case \"APP/POKEMON-TOGGLE-IS-FETCHING\": {\r\n            return {...state, isFetching: Actions.pokemonIsFetching}\r\n        }\r\n        case \"APP/SET-ERROR\": {\r\n            return {...state, isFetching: Actions.error}\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const ToggleIsFetching = (isFetching: boolean) => {\r\n    return {\r\n        type: 'APP/TOGGLE-IS-FETCHING', isFetching\r\n    } as const\r\n}\r\nexport const PokemonToggleIsFetching = (pokemonIsFetching: boolean) => {\r\n    return {\r\n        type: 'APP/POKEMON-TOGGLE-IS-FETCHING', pokemonIsFetching\r\n    } as const\r\n}\r\nexport const SetError = (error: string) => {\r\n    return {\r\n        type: 'APP/SET-ERROR', error\r\n    } as const\r\n}\r\n\r\nexport type ToggleIsFetchingType = ReturnType<typeof ToggleIsFetching>\r\nexport type PokemonToggleIsFetchingType = ReturnType<typeof PokemonToggleIsFetching>\r\nexport type SetErrorType = ReturnType<typeof SetError>\r\n\r\nexport type AppActionTypes = ToggleIsFetchingType | SetErrorType | PokemonToggleIsFetchingType","import {Dispatch} from \"react\";\r\nimport {PokeApi} from \"../API/api\";\r\nimport {AppActionTypes, SetError, ToggleIsFetching} from \"./AppReducer\";\r\nimport {PokemonStateType} from \"./PokemonReducer\";\r\n\r\nconst PokemonInitialState: any = null\r\ntype resultsType = Array<PokemonsResultsType>\r\n\r\ntype PokemonsResultsType = {\r\n    name: string\r\n    url: string\r\n    img?: string\r\n    id?: string\r\n}\r\n\r\nexport type PokemonInitialStateType = {\r\n    count?: number\r\n    next?: string\r\n    previous?: string\r\n    results?: resultsType\r\n}\r\n\r\nexport const PokemonsReducers = (state = PokemonInitialState, Actions: PokemonsActionTypes) => {\r\n    switch (Actions.type) {\r\n        case \"POKEMONS/SET-POKEMONS-DATA\": {\r\n            return {...Actions.Data}\r\n        }\r\n        case \"POKEMONS/SET-POKEMONS-IMG-DATA\": {\r\n\r\n            return {\r\n                ...state, results: [...state.results.map((i: any, index: number) => {\r\n                    if (i.name === Object.values(Actions.Data).find(v => v === i.name)) {\r\n                        i.push = (Actions?.Data?.sprites?.other[\"official-artwork\"].front_default, Actions.Data.id)\r\n                    }\r\n                })]\r\n            }\r\n            return\r\n        }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const SetPokemonsData = (Data: PokemonInitialStateType) => {\r\n    return {\r\n        type: 'POKEMONS/SET-POKEMONS-DATA', Data\r\n    } as const\r\n}\r\nexport const SetPokemonsImgData = (Data: PokemonStateType,) => {\r\n    return {\r\n        type: 'POKEMONS/SET-POKEMONS-IMG-DATA', Data\r\n    } as const\r\n}\r\n\r\ntype SetPokemonsDataType = ReturnType<typeof SetPokemonsData>\r\ntype SetPokemonsImgDataType = ReturnType<typeof SetPokemonsImgData>\r\n\r\ntype PokemonsActionTypes = SetPokemonsDataType | SetPokemonsImgDataType\r\n\r\nexport const GetPokemons = (id?: number) => {\r\n    return (dispatch: Dispatch<DispatchType>) => {\r\n        PokeApi.PokesGet().then(response => {\r\n            if (response.status === 200) {\r\n                dispatch(SetPokemonsData(response.data))\r\n            }\r\n        })\r\n            .catch(e => dispatch(SetError(e.message)))\r\n            .finally(() => dispatch(ToggleIsFetching(false)))\r\n    }\r\n}\r\n\r\nexport const GetNextPokemons = (next: string) => {\r\n    return (dispatch: Dispatch<DispatchType>) => {\r\n        dispatch(ToggleIsFetching(true))\r\n        PokeApi.PokesNextGet(next).then(response => {\r\n            if (response.status === 200) {\r\n                dispatch(SetPokemonsData(response.data))\r\n            }\r\n        })\r\n            .catch(e => dispatch(SetError(e.message)))\r\n            .finally(() => dispatch(ToggleIsFetching(false)))\r\n    }\r\n}\r\n\r\ntype DispatchType = PokemonsActionTypes | AppActionTypes","import { PokemonStateType } from \"./PokemonReducer\"\r\nimport {Dispatch} from \"react\";\r\nimport {PokeApi} from \"../API/api\";\r\n\r\n\r\nexport type pokeInfoType = {\r\n    name:string,\r\n    img:string,\r\n    id: number\r\n}\r\nexport type cardInitialStateType = Array<pokeInfoType>\r\n\r\nconst cardInitialState:cardInitialStateType = []\r\n\r\nexport const CardReducer = (state = cardInitialState, actions:actionsType):cardInitialStateType=> {\r\n    switch (actions.type) {\r\n        case \"SET-CARD-DATA\":{\r\n            return[...state,{name:actions.Data.name, img:actions.Data.sprites.other[\"official-artwork\"].front_default, id:actions.Data.id}]\r\n        }\r\n        default: return state\r\n    }\r\n}\r\n\r\nexport const SetCardData = (Data:PokemonStateType)=>{\r\n    return{\r\n        type:'SET-CARD-DATA', Data\r\n    } as const\r\n}\r\n\r\nexport type SetCardDataType = ReturnType<typeof SetCardData>\r\n\r\nexport type actionsType = SetCardDataType\r\n\r\nexport const GetCardInfo = (name:string) => {\r\n    debugger\r\n    return (dispatch:Dispatch<any>)=>{\r\n        PokeApi.PokemonGet(name).then(res=>{\r\n            debugger\r\n            if (res.status===200){\r\n                dispatch(SetCardData(res.data))\r\n            }\r\n        })\r\n    }\r\n}","import React, {useEffect} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../Redux/Store\";\r\nimport {Card} from \"antd\"\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {cardInitialStateType, GetCardInfo} from \"../../Redux/CardReducer\";\r\n\r\ntype PokemonKartType = {\r\n    url: string\r\n    name: string\r\n    index: number\r\n}\r\n\r\nexport const PokemonCard = (props: PokemonKartType) => {\r\n\r\n    const dispatch = useDispatch()\r\n    const Pokemon = useSelector<AppStateType, cardInitialStateType>(state => state.card)\r\n\r\n    useEffect(() => {\r\n        dispatch(GetCardInfo(props.name))\r\n    }, [dispatch, props.name])\r\n\r\n    let ImgUrl = ''\r\n    if(Pokemon[Pokemon.findIndex(i=>i.name===props.name)]){\r\n        ImgUrl=Pokemon[Pokemon.findIndex(i=>i.name===props.name)].img\r\n    }\r\n\r\n    return <div>\r\n        <NavLink to={'/pokemon/' + props.name}>\r\n            <Card\r\n                style={{width: 250, margin: 10}}\r\n                title={props.name}\r\n                cover={<img src={ImgUrl} alt=\"\"/>}\r\n                loading={ImgUrl===''}\r\n                type='inner'\r\n                bordered\r\n                hoverable\r\n                size='small'\r\n            >\r\n            </Card>\r\n        </NavLink>\r\n    </div>\r\n\r\n}\r\n","import {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../Redux/Store\";\r\nimport {GetNextPokemons, GetPokemons, PokemonInitialStateType} from \"../../Redux/PokemonsReducer\";\r\nimport {AppInitialStateType} from \"../../Redux/AppReducer\";\r\nimport React, {useEffect} from \"react\";\r\nimport {PokemonCard} from \"../PokemonCard/PokemonCard\";\r\nimport {Button, Row, Spin} from \"antd\";\r\nimport {LeftOutlined, RightOutlined} from \"@ant-design/icons\";\r\n\r\nexport const MainPage = () => {\r\n\r\nconst dispatch = useDispatch()\r\n\r\nconst Pokemons = useSelector<AppStateType, PokemonInitialStateType>(state => state.pokemons)\r\n\r\nconst AppData = useSelector<AppStateType, AppInitialStateType>(state => state.app)\r\n\r\nuseEffect(() => {\r\n    dispatch(GetPokemons())\r\n}, [dispatch])\r\n\r\nconst PokemonsRender = Pokemons?.results ? Pokemons.results.map((i, index) => {\r\n    return <div key={index}><PokemonCard url={i.url} name={i.name} key={index} index={index}/></div>\r\n}) : null\r\n\r\nconst toNextPage = () => {\r\n    if (!Pokemons.next) return\r\n    dispatch(GetNextPokemons(Pokemons.next))\r\n}\r\nconst toPreviousPage = () => {\r\n    if (!Pokemons.previous) return\r\n    dispatch(GetNextPokemons(Pokemons.previous))\r\n}\r\n\r\nreturn (\r\n    <div className=\"App\">\r\n        {AppData.isFetching ? <Spin/> : null}\r\n        <div className=\"pokeWrapper\">\r\n            <Row gutter={{xs: 8, sm: 16, md: 24, lg: 32}}>\r\n                {PokemonsRender}\r\n            </Row>\r\n        </div>\r\n        <div className=\"buttonWrapper\">{Pokemons?.previous ? <Button\r\n            onClick={toPreviousPage}\r\n            disabled={AppData.isFetching}\r\n            type='primary'\r\n            shape='round'\r\n            size='large'\r\n            icon={<LeftOutlined/>}\r\n        ></Button> : null}\r\n            {Pokemons?.next ? <Button\r\n                onClick={toNextPage}\r\n                disabled={AppData.isFetching}\r\n                type='primary'\r\n                shape='round'\r\n                size='large'\r\n                icon={<RightOutlined/>}\r\n            ></Button> : null}</div>\r\n    </div>\r\n)\r\n}","import {Dispatch} from \"react\";\r\nimport {PokeApi} from \"../API/api\";\r\nimport {PokemonToggleIsFetching, SetError} from \"./AppReducer\";\r\n\r\nconst PokemonInitialState = {\r\n    id: 0,\r\n    name: '',\r\n    base_experience: 0,\r\n    height: 0,\r\n    is_default: false,\r\n    order: 0,\r\n    weight: 0,\r\n    abilities: [\r\n        {\r\n            is_hidden: false,\r\n            slot: 0,\r\n            ability: {\r\n                name: '',\r\n                url: ''\r\n            }\r\n        }\r\n    ],\r\n    forms: [\r\n        {\r\n            name: '',\r\n            url: ''\r\n        }\r\n    ],\r\n    game_indices: [\r\n        {\r\n            game_index: 0,\r\n            version: {\r\n                name: '',\r\n                url: ''\r\n            }\r\n        }\r\n    ],\r\n    held_items: [\r\n        {\r\n            item: {\r\n                name: '',\r\n                url: ''\r\n            },\r\n            version_details: [\r\n                {\r\n                    rarity: '',\r\n                    version: {\r\n                        name: '',\r\n                        url: ''\r\n                    }\r\n                }\r\n            ]\r\n        }\r\n    ],\r\n    location_area_encounters: '',\r\n    moves: [\r\n        {\r\n            move: {\r\n                name: '',\r\n                url: ''\r\n            },\r\n            version_group_details: [\r\n                {\r\n                    level_learned_at: 0,\r\n                    version_group: {\r\n                        name: '',\r\n                        url: ''\r\n                    },\r\n                    move_learn_method: {\r\n                        name: '',\r\n                        url: ''\r\n                    }\r\n                }\r\n            ]\r\n        }\r\n    ],\r\n    species: {\r\n        name: '',\r\n        url: ''\r\n    },\r\n    sprites: {\r\n        back_female: '',\r\n        back_shiny_female: '',\r\n        back_default: 'string',\r\n        front_female: '',\r\n        front_shiny_female: '',\r\n        back_shiny: '',\r\n        front_default: '',\r\n        front_shiny: '',\r\n        other: {\r\n            dream_world: '',\r\n            \"official-artwork\": {front_default:''}\r\n        },\r\n        versions: {\r\n           \" generation-i\": {\r\n                \"red-blue\": {},\r\n                yellow: {},\r\n            },\r\n            \"generation-ii\": {\r\n                crystal: {},\r\n                gold: {},\r\n                silver: {},\r\n            },\r\n            \"generation-iii\": {\r\n                emerald: {},\r\n                \"firered-leafgreen\": {},\r\n                \"ruby-sapphire\": {},\r\n            },\r\n            \"generation-iv\": {\r\n                \"diamond-pearl\": {},\r\n                \"heartgold-soulsilver\": {},\r\n                platinum: {},\r\n            },\r\n            \"generation-v\": {\r\n                \"black-white\": {},\r\n            },\r\n            \"generation-vi\": {\r\n                \"omegaruby-alphasapphire\": {},\r\n                \"x-y\": {},\r\n            },\r\n            \"generation-vii\": {\r\n                icons: {},\r\n                \"ultra-sun-ultra-moon\": {},\r\n            },\r\n            \"generation-viii\": {\r\n                icons: {},\r\n            }\r\n        }\r\n    },\r\n    stats: [\r\n        {\r\n            base_stat: 0,\r\n            effort: 0,\r\n            stat: {\r\n                name: '',\r\n                url:'',\r\n            }\r\n        }\r\n    ],\r\n    types: [\r\n        {\r\n            slot: 0,\r\n            type: {\r\n                name: '',\r\n                url: '',\r\n            }\r\n        }\r\n    ]\r\n}\r\n\r\nexport type PokemonStateType = typeof PokemonInitialState\r\n\r\nexport const PokemonReducer = (state=PokemonInitialState,actions:PokemonActionTypes):PokemonStateType => {\r\n    switch (actions.type){\r\n        case \"POKEMON/SET-POKEMON-DATA\":{\r\n         return {...actions.Data}\r\n        }\r\n        case \"POKEMON/SET-NEXT-POKEMON-DATA\":{\r\n            debugger\r\n            return {...actions.Data}\r\n        }\r\n        default: return state\r\n    }\r\n}\r\n\r\nexport const SetPokemonData = (Data:PokemonStateType) => {\r\n    return{\r\n        type:'POKEMON/SET-POKEMON-DATA', Data\r\n    } as const\r\n}\r\nexport const SetNextPokemonData = (Data:PokemonStateType) => {\r\n    return{\r\n        type:'POKEMON/SET-NEXT-POKEMON-DATA', Data\r\n    } as const\r\n}\r\n\r\ntype SetPokemonDataType = ReturnType<typeof SetPokemonData>\r\ntype SetNextPokemonDataType = ReturnType<typeof SetNextPokemonData>\r\n\r\ntype PokemonActionTypes = SetPokemonDataType | SetNextPokemonDataType\r\n\r\nexport const GetPokemon = (name:string) => {\r\n    return (dispatch:Dispatch<any>) =>{\r\n        debugger\r\n        dispatch(PokemonToggleIsFetching(true))\r\n        PokeApi.PokemonGet(name).then(response=>{\r\n            debugger\r\n            if (response.status === 200) {\r\n                dispatch(SetPokemonData(response.data))\r\n            }})\r\n            .catch(e=>dispatch(SetError(e.message)))\r\n            .finally(()=>dispatch(PokemonToggleIsFetching(false)))\r\n    }\r\n}\r\nexport const GetNextPokemon = (name:string) => {\r\n    return (dispatch:Dispatch<any>) =>{\r\n        debugger\r\n        dispatch(PokemonToggleIsFetching(true))\r\n        PokeApi.PokemonGet(name).then(response=>{\r\n            debugger\r\n            if (response.status === 200) {\r\n                dispatch(SetNextPokemonData(response.data))\r\n            }})\r\n            .catch(e=>dispatch(SetError(e.message)))\r\n            .finally(()=>dispatch(PokemonToggleIsFetching(false)))\r\n    }\r\n}","import React, {useEffect} from \"react\"\r\nimport {Button, Card, Row, Space} from \"antd\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../Redux/Store\";\r\nimport {GetNextPokemon, PokemonStateType} from \"../../Redux/PokemonReducer\";\r\nimport {Link, useParams} from \"react-router-dom\";\r\n\r\nexport const Pokemon = () => {\r\n    debugger\r\n    let name: { name: string } = useParams()\r\n\r\n    const Pokemon = useSelector<AppStateType, PokemonStateType>(state => state.pokemon)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(GetNextPokemon(name.name))\r\n    }, [name.name])\r\n\r\n    let ImgUrl = Pokemon.sprites ? Pokemon.sprites.other[\"official-artwork\"].front_default : ''\r\n\r\n    return (\r\n        <>\r\n            <Row justify='center'><Card\r\n                style={{textAlign: \"center\"}}\r\n                // cover={<img src={ImgUrl} alt=\"PokemonIMG\"/>}\r\n                loading={ImgUrl === ''}\r\n                title={Pokemon.name}\r\n                type='inner'\r\n            >\r\n                <Row><img src={ImgUrl} alt=\"PokemonIMG\"/>\r\n                    <Space direction={\"vertical\"} size={1}>\r\n                        <Card title='Abilities' style={{textAlign: \"center\"}} className=\"gutter-row\">\r\n                            {Pokemon.abilities.map((i, index) => <div key={index}>{i.ability.name}</div>)}\r\n                        </Card>\r\n                        <Card title='Base experience' style={{textAlign: \"center\"}}>\r\n                            {Pokemon.base_experience}\r\n                        </Card>\r\n                        <Card title='Height' style={{textAlign: \"center\"}}>\r\n                            {Pokemon.height}\r\n                        </Card>\r\n                        <Card title='Weight' style={{textAlign: \"center\"}}>\r\n                            {Pokemon.weight}\r\n                        </Card>\r\n                    </Space></Row>\r\n                <Space>\r\n                    <Button title='next'><Link\r\n                        to={`/Pokemon/${Pokemon.id - 1 === 0 ? 1 : Pokemon.id - 1}`}>previous</Link></Button>\r\n                    <Button title='next'><Link to={`/Pokemon/${Pokemon.id + 1}`}>nextBeast</Link></Button>\r\n                </Space>\r\n\r\n            </Card></Row>\r\n        </>)\r\n\r\n}","import React from 'react';\nimport 'antd/dist/antd.css'\nimport './App.css';\nimport {Breadcrumb, Layout, Menu} from \"antd\";\nimport {MainPage} from \"./components/MainPage/MainPage\";\nimport {BrowserRouter, Link, Route, Switch} from \"react-router-dom\";\nimport {Pokemon} from \"./components/Pokemon/Pokemon\";\n\nconst {SubMenu} = Menu;\nconst {Header, Content, Footer, Sider} = Layout;\n\nfunction App() {\n     return <>\n        <BrowserRouter>\n            <Layout>\n                <Header className=\"header\">\n                    <div className=\"logo\"/>\n                    <Menu theme=\"dark\" mode=\"horizontal\" defaultSelectedKeys={['1']}>\n                        <Menu.Item key=\"1\"><Link to='/MainPage'/>Main Page</Menu.Item>\n                        <Menu.Item key=\"2\"><Link to=\"/Pokemon/1\"/>Pokemon page</Menu.Item>\n                        {/*<Menu.Item key=\"3\">nav 3</Menu.Item>*/}\n                    </Menu>\n                </Header>\n                <Content style={{padding: '0 50px'}}>\n                    <Breadcrumb style={{margin: '16px 0'}}>\n                        <Breadcrumb.Item>Home</Breadcrumb.Item>\n                        <Breadcrumb.Item>List</Breadcrumb.Item>\n                        <Breadcrumb.Item>App</Breadcrumb.Item>\n                    </Breadcrumb>\n                    <Layout className=\"site-layout-background\" style={{padding: '24px 0'}}>\n                        {/*<Sider className=\"site-layout-background\" width={200}>*/}\n                        {/*    <Menu*/}\n                        {/*        mode=\"inline\"*/}\n                        {/*        defaultSelectedKeys={['1']}*/}\n                        {/*        defaultOpenKeys={['sub1']}*/}\n                        {/*        style={{height: '100%'}}*/}\n                        {/*    >*/}\n                        {/*        <SubMenu key=\"sub1\" icon={<UserOutlined/>} title=\"subnav 1\">*/}\n                        {/*            <Menu.Item key=\"1\">option1</Menu.Item>*/}\n                        {/*            <Menu.Item key=\"2\">option2</Menu.Item>*/}\n                        {/*            <Menu.Item key=\"3\">option3</Menu.Item>*/}\n                        {/*            <Menu.Item key=\"4\">option4</Menu.Item>*/}\n                        {/*        </SubMenu>*/}\n                        {/*        /!*<SubMenu key=\"sub2\" icon={<LaptopOutlined />} title=\"subnav 2\">*!/*/}\n                        {/*        /!*    <Menu.Item key=\"5\">option5</Menu.Item>*!/*/}\n                        {/*        /!*    <Menu.Item key=\"6\">option6</Menu.Item>*!/*/}\n                        {/*        /!*    <Menu.Item key=\"7\">option7</Menu.Item>*!/*/}\n                        {/*        /!*    <Menu.Item key=\"8\">option8</Menu.Item>*!/*/}\n                        {/*        /!*</SubMenu>*!/*/}\n                        {/*        /!*<SubMenu key=\"sub3\" icon={<NotificationOutlined />} title=\"subnav 3\">*!/*/}\n                        {/*        /!*    <Menu.Item key=\"9\">option9</Menu.Item>*!/*/}\n                        {/*        /!*    <Menu.Item key=\"10\">option10</Menu.Item>*!/*/}\n                        {/*        /!*    <Menu.Item key=\"11\">option11</Menu.Item>*!/*/}\n                        {/*        /!*    <Menu.Item key=\"12\">option12</Menu.Item>*!/*/}\n                        {/*        /!*</SubMenu>*!/*/}\n                        {/*    </Menu>*/}\n                        {/*</Sider>*/}\n                        <Content style={{padding: '0 5px', minHeight: 280}}>\n                            <Switch>\n                                <Route exact path=\"/\"\n                                       render={() => <MainPage/>}/>\n                                <Route path=\"/MainPage\"\n                                       render={() => <MainPage/>}/>\n                                <Route path=\"/Pokemon/:name?\"\n                                       render={() => <Pokemon/>}/>\n                            </Switch>\n                        </Content>\n                    </Layout>\n                </Content>\n                <Footer style={{textAlign: 'center'}}>Ant Design ©2018 Created by Ant UED</Footer>\n            </Layout>\n        </BrowserRouter>\n    </>\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import {combineReducers, createStore, applyMiddleware} from 'redux'\r\nimport thunk from \"redux-thunk\";\r\nimport {PokemonsReducers} from \"./PokemonsReducer\";\r\nimport {AppReducer} from \"./AppReducer\";\r\nimport { PokemonReducer } from './PokemonReducer';\r\nimport {CardReducer} from \"./CardReducer\";\r\n\r\nconst RootReducer = combineReducers(\r\n    {\r\n        pokemons: PokemonsReducers,\r\n        app:AppReducer,\r\n        pokemon:PokemonReducer,\r\n        card: CardReducer\r\n    }\r\n)\r\n\r\nexport type AppStateType = ReturnType<typeof RootReducer>\r\n\r\nexport const AppState = createStore(RootReducer, applyMiddleware(thunk))\r\n\r\n\r\n// @ts-ignore\r\nwindow.AppState = AppState","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport {AppState} from \"./Redux/Store\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={AppState}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}