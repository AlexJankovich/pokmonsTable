{"version":3,"sources":["API/api.ts","Redux/AppReducer.ts","Redux/PokemonsReducer.ts","Redux/CardReducer.ts","Common/routes.ts","components/PokemonCard/PokemonCard.tsx","components/MainPage/MainPage.tsx","Redux/PokemonReducer.ts","components/Pokemon/Pokemon.tsx","App.tsx","reportWebVitals.ts","Redux/Store.ts","index.tsx"],"names":["instance","axios","create","baseURL","PokeApi","pageSize","page","get","then","res","console","log","status","name","AppInitialState","isFetching","pokemonIsFetching","Error","isInitialise","SetError","error","type","PokemonInitialState","count","results","url","img","id","currentPage","GetPokemons","dispatch","getState","pokemons","response","Data","data","catch","e","message","finally","cardInitialState","routes","routeLinks","PokemonCard","props","useDispatch","Pokemon","useSelector","state","card","useEffect","ImgUrl","findIndex","i","to","style","width","margin","title","cover","src","alt","loading","bordered","hoverable","size","MainPage","Pokemons","AppData","app","PokemonsRender","map","index","className","gutter","xs","sm","md","lg","justify","total","showSizeChanger","showQuickJumper","onChange","SetCurrentPage","defaultPageSize","responsive","base_experience","height","is_default","order","weight","abilities","is_hidden","slot","ability","forms","game_indices","game_index","version","held_items","item","version_details","rarity","location_area_encounters","moves","move","version_group_details","level_learned_at","version_group","move_learn_method","species","sprites","back_female","back_shiny_female","back_default","front_female","front_shiny_female","back_shiny","front_default","front_shiny","other","dream_world","versions","yellow","crystal","gold","silver","emerald","platinum","icons","stats","base_stat","effort","stat","types","useParams","pokemon","GetPokemon","textAlign","direction","backgroundColor","color","border","Header","Menu","SubMenu","Layout","Content","Footer","Sider","App","useLocation","initialized","theme","mode","selectedKeys","pathname","Item","padding","minHeight","exact","path","render","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","RootReducer","combineReducers","actions","action","AppState","createStore","applyMiddleware","thunk","window","ReactDOM","store","document","getElementById"],"mappings":"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","file":"static/js/main.419c99eb.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nexport const instance = axios.create({baseURL: 'https://pokeapi.co/api/v2/'})\r\n\r\nexport const PokeApi = {\r\n    PokesGet: ( pageSize?:number, page?:number) => {\r\n        return instance.get(`pokemon/?limit=${pageSize}&offset=${page}`).then(res => {\r\n            console.log(res.status)\r\n            return res\r\n        })\r\n    },\r\n    PokesNextGet:(next:string) =>{\r\n        return axios.get(next).then(res=>res)\r\n    },\r\n    PokemonGet:(name:string)=>{\r\n        return instance.get(`pokemon/${name}`).then(res=> {\r\n            return res\r\n        })\r\n\r\n    }\r\n}","import { Action } from \"redux\"\r\nimport { ThunkAction } from \"redux-thunk\"\r\nimport { GetPokemons } from \"./PokemonsReducer\"\r\nimport {AppStateType} from \"./Store\";\r\n\r\nconst AppInitialState = {\r\n    isFetching: false,\r\n    pokemonIsFetching: false,\r\n    Error: '',\r\n    isInitialise:false\r\n}\r\n\r\nexport type AppInitialStateType = typeof AppInitialState\r\n\r\nexport const AppReducer = (state: AppInitialStateType = AppInitialState, action: AppActionTypes) => {\r\n    switch (action.type) {\r\n        case \"APP/TOGGLE-IS-FETCHING\": {\r\n            return {...state, isFetching: action.isFetching}\r\n        }\r\n        case \"APP/POKEMON-TOGGLE-IS-FETCHING\": {\r\n            return {...state, isFetching: action.pokemonIsFetching}\r\n        }\r\n        case \"APP/SET-ERROR\": {\r\n            return {...state, isFetching: action.error}\r\n        }\r\n        case \"APP/SET-INITIALIZED\":{\r\n            return {...state,isInitialise:action.initialized}\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const ToggleIsFetching = (isFetching: boolean) => {\r\n    return {\r\n        type: 'APP/TOGGLE-IS-FETCHING', isFetching\r\n    } as const\r\n}\r\nexport const PokemonToggleIsFetching = (pokemonIsFetching: boolean) => {\r\n    return {\r\n        type: 'APP/POKEMON-TOGGLE-IS-FETCHING', pokemonIsFetching\r\n    } as const\r\n}\r\nexport const SetError = (error: string) => {\r\n    return {\r\n        type: 'APP/SET-ERROR', error\r\n    } as const\r\n}\r\n\r\nexport const setInitializeSuccess = (initialized:boolean) => ({\r\n    type: 'APP/SET-INITIALIZED', initialized\r\n} as const)\r\n\r\n\r\n\r\nexport const InitializeApp = (): ThunkAction<void, AppStateType, unknown, Action<string>> => (dispatch,getState) => {\r\n    let promise = dispatch(GetPokemons(getState().pokemons.pageSize, getState().pokemons.currentPage))\r\n    promise.then(()=>\r\n        dispatch(setInitializeSuccess(true))\r\n    )\r\n}\r\ntype setInitializeType = ReturnType<typeof setInitializeSuccess>\r\nexport type ToggleIsFetchingType = ReturnType<typeof ToggleIsFetching>\r\nexport type PokemonToggleIsFetchingType = ReturnType<typeof PokemonToggleIsFetching>\r\nexport type SetErrorType = ReturnType<typeof SetError>\r\n\r\nexport type AppActionTypes = ToggleIsFetchingType | SetErrorType | PokemonToggleIsFetchingType | setInitializeType","import {ThunkAction} from \"redux-thunk\";\r\nimport {PokeApi} from \"../API/api\";\r\nimport {AppActionTypes, SetError, ToggleIsFetching} from \"./AppReducer\";\r\nimport {PokemonStateType} from \"./PokemonReducer\";\r\nimport {AppStateType} from \"./Store\";\r\n\r\ntype PokemonsResultsType = {\r\n    name: string\r\n    url: string\r\n    img?: string\r\n    id?: number\r\n}\r\n\r\nconst PokemonInitialState = {\r\n    count: 1,\r\n    // next: '',\r\n    // previous: '',\r\n    results: [\r\n        {\r\n            name: '',\r\n            url: '',\r\n            img: '',\r\n            id: 0\r\n        }\r\n    ],\r\n    currentPage: 1,\r\n    pageSize: 20\r\n}\r\n\r\nexport type PokemonInitialStateType = typeof PokemonInitialState\r\n\r\nexport const PokemonsReducers = (state: PokemonInitialStateType = PokemonInitialState, actions: PokemonsActionTypes): PokemonInitialStateType => {\r\n    switch (actions.type) {\r\n        case \"POKEMONS/SET-POKEMONS-DATA\": {\r\n            return {\r\n                ...state,\r\n                count: actions.Data.count,\r\n                results: actions.Data.results\r\n            }\r\n        }\r\n        case \"POKEMONS/SET-POKEMONS-IMG-DATA\": {\r\n            return {\r\n                ...state, results: state.results.map((i) => {\r\n                    if (i.name && i.name === actions.Data.name) {\r\n                        i = {\r\n                            ...i,\r\n                            id: actions.Data.id,\r\n                            img: actions.Data.sprites.other[\"official-artwork\"].front_default\r\n                        }\r\n                    } else {\r\n                        i = {...i}\r\n                    }\r\n                    return i\r\n                })\r\n            }\r\n        }\r\n        case \"POKEMONS/SET-PAGE-SIZE\": {\r\n            return {...state, pageSize: actions.size}\r\n        }\r\n        case 'POKEMONS/SET-CURRENT-SIZE': {\r\n            return {...state, pageSize: actions.page}\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const SetPokemonsData = (Data: PokemonInitialStateType) => {\r\n    return {\r\n        type: 'POKEMONS/SET-POKEMONS-DATA', Data\r\n    } as const\r\n}\r\nexport const SetPokemonsImgData = (Data: PokemonStateType,) => {\r\n    return {\r\n        type: 'POKEMONS/SET-POKEMONS-IMG-DATA', Data\r\n    } as const\r\n}\r\nexport const SetPageSize = (size: number) => {\r\n    return {\r\n        type: 'POKEMONS/SET-PAGE-SIZE', size\r\n    } as const\r\n}\r\nexport const SetCurrentPage = (page: number) => {\r\n    return {\r\n        type: 'POKEMONS/SET-CURRENT-SIZE', page\r\n    } as const\r\n}\r\n\r\n//Actions creators\r\n\r\ntype SetPokemonsDataType = ReturnType<typeof SetPokemonsData>\r\ntype SetPokemonsImgDataType = ReturnType<typeof SetPokemonsImgData>\r\ntype SetPageSizeType = ReturnType<typeof SetPageSize>\r\ntype SetCurrentPageType = ReturnType<typeof SetCurrentPage>\r\n\r\n// Types of Actions creators\r\n\r\ntype PokemonsActionTypes =\r\n    SetPokemonsDataType\r\n    | SetPokemonsImgDataType\r\n    | SetPageSizeType\r\n    | SetCurrentPageType\r\n //Thunks\r\nexport const GetPokemons = (pageSize?: number, currentPage?: number): ThunkAction<any, AppStateType, unknown, DispatchType> => {\r\n    return (dispatch, getState) => {\r\n        return PokeApi.PokesGet(pageSize || getState().pokemons.pageSize, currentPage || getState().pokemons.currentPage).then(response => {\r\n            if (response.status === 200) {\r\n                dispatch(SetPokemonsData(response.data))\r\n            }\r\n        })\r\n            .catch(e => dispatch(SetError(e.message)))\r\n            .finally(() => dispatch(ToggleIsFetching(false)))\r\n    }\r\n}\r\n\r\n\r\ntype DispatchType = PokemonsActionTypes | AppActionTypes","import { PokemonStateType } from \"./PokemonReducer\"\r\nimport {Dispatch} from \"react\";\r\nimport {PokeApi} from \"../API/api\";\r\n\r\nexport type pokeInfoType = {\r\n    name:string,\r\n    img:string,\r\n    id: number\r\n}\r\n\r\nconst cardInitialState = [\r\n    {\r\n        name:'',\r\n        img:'',\r\n        id:0\r\n    }\r\n]\r\nexport type cardInitialStateType =typeof cardInitialState\r\n\r\nexport const CardReducer = (state:cardInitialStateType = cardInitialState, actions:actionsType):cardInitialStateType=> {\r\n    switch (actions.type) {\r\n        case \"SET-CARD-DATA\":{\r\n            if (!actions.Data.name) {\r\n                return state\r\n            }else {\r\n                return [...state, {\r\n                    name: actions.Data.name,\r\n                    img: actions.Data.sprites.other[\"official-artwork\"].front_default,\r\n                    id: actions.Data.id\r\n                }]\r\n            }\r\n        }\r\n        default: return state\r\n    }\r\n}\r\n\r\nexport const SetCardData = (Data:PokemonStateType)=>{\r\n    return{\r\n        type:'SET-CARD-DATA', Data\r\n    } as const\r\n}\r\n\r\nexport type SetCardDataType = ReturnType<typeof SetCardData>\r\n\r\nexport type actionsType = SetCardDataType\r\n\r\nexport const GetCardInfo = (name:string) => {\r\n    return (dispatch:Dispatch<any>)=>{\r\n        PokeApi.PokemonGet(name).then(res=>{\r\n            if (res.status===200){\r\n                dispatch(SetCardData(res.data))\r\n            }\r\n        })\r\n    }\r\n}","export const routes = {\r\n    default: `/`,\r\n    mainPage: `/mainPage`,\r\n    pokemon: `/Pokemon/:name?`,\r\n    notfound: '/*'\r\n}\r\n\r\nexport const routeLinks ={\r\n    mainPage: '/mainPage',\r\n    defaultPokemon: '/pokemon/1',\r\n    pokemon:'/pokemon/'\r\n}","import React, {useEffect} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../Redux/Store\";\r\nimport {Card} from \"antd\"\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {cardInitialStateType, GetCardInfo} from \"../../Redux/CardReducer\";\r\nimport {routeLinks} from \"../../Common/routes\";\r\n\r\ntype PokemonKartType = {\r\n    url: string\r\n    name: string\r\n    index: number\r\n}\r\n\r\nexport const PokemonCard = (props: PokemonKartType) => {\r\n\r\n    const dispatch = useDispatch()\r\n    const Pokemon = useSelector<AppStateType, cardInitialStateType>(state => state.card)\r\n\r\n    useEffect(() => {\r\n        dispatch(GetCardInfo(props.name))\r\n    }, [dispatch, props.name])\r\n\r\n    let ImgUrl = ''\r\n    if(Pokemon[Pokemon.findIndex(i=>i.name===props.name)]){\r\n        ImgUrl=Pokemon[Pokemon.findIndex(i=>i.name===props.name)].img\r\n    }\r\n\r\n    return <div>\r\n        <NavLink to={routeLinks.pokemon + props.name}>\r\n            <Card\r\n                style={{width: 250, margin: 10}}\r\n                title={props.name}\r\n                cover={<img src={ImgUrl} alt=\"\"/>}\r\n                loading={ImgUrl===''}\r\n                type='inner'\r\n                bordered\r\n                hoverable\r\n                size='small'\r\n            >\r\n            </Card>\r\n        </NavLink>\r\n    </div>\r\n\r\n}\r\n","import {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../Redux/Store\";\r\nimport {\r\n    GetPokemons,\r\n    PokemonInitialStateType,\r\n    SetCurrentPage,\r\n    SetPageSize\r\n} from \"../../Redux/PokemonsReducer\";\r\nimport {AppInitialStateType} from \"../../Redux/AppReducer\";\r\nimport React, {useEffect, useState} from \"react\";\r\nimport {PokemonCard} from \"../PokemonCard/PokemonCard\";\r\nimport {Button, Pagination, Row, Space, Spin} from \"antd\";\r\nimport {LeftOutlined, RightOutlined} from \"@ant-design/icons\";\r\n\r\nexport const MainPage = () => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const Pokemons = useSelector<AppStateType, PokemonInitialStateType>(state => state.pokemons)\r\n\r\n    const AppData = useSelector<AppStateType, AppInitialStateType>(state => state.app)\r\n\r\n    useEffect(() => {\r\n        dispatch(GetPokemons(Pokemons.pageSize, Pokemons.currentPage))\r\n    }, [dispatch])\r\n\r\n    const PokemonsRender = Pokemons?.results ? Pokemons.results.map((i, index) => {\r\n        return <div key={index}><PokemonCard url={i.url} name={i.name} key={index} index={index}/></div>\r\n    }) : null\r\n\r\n    const setPage = (page: number, pageSize?: number) => {\r\n        dispatch(GetPokemons(pageSize, page))\r\n        dispatch(SetPageSize(pageSize||10))\r\n        dispatch(SetCurrentPage(page))\r\n    }\r\n\r\n    return <div className=\"App\">\r\n        {AppData.isFetching ? <Spin/> : null}\r\n        <div className=\"pokeWrapper\">\r\n            <Row gutter={{xs: 8, sm: 16, md: 24, lg: 32}}>\r\n                {PokemonsRender}\r\n            </Row>\r\n        </div>\r\n        <>\r\n            <Row justify='center'><Pagination\r\n                total={Pokemons.count}\r\n                showSizeChanger\r\n                showQuickJumper\r\n                onChange={setPage}\r\n                defaultPageSize={Pokemons.pageSize}\r\n                // showTotal={total => `Total ${total} items`}\r\n                responsive\r\n            /></Row>\r\n        </>\r\n    </div>\r\n}","import {Dispatch} from \"react\";\r\nimport {PokeApi} from \"../API/api\";\r\nimport {PokemonToggleIsFetching, SetError} from \"./AppReducer\";\r\n\r\nconst PokemonInitialState = {\r\n    id: 0,\r\n    name: '',\r\n    base_experience: 0,\r\n    height: 0,\r\n    is_default: false,\r\n    order: 0,\r\n    weight: 0,\r\n    abilities: [\r\n        {\r\n            is_hidden: false,\r\n            slot: 0,\r\n            ability: {\r\n                name: '',\r\n                url: ''\r\n            }\r\n        }\r\n    ],\r\n    forms: [\r\n        {\r\n            name: '',\r\n            url: ''\r\n        }\r\n    ],\r\n    game_indices: [\r\n        {\r\n            game_index: 0,\r\n            version: {\r\n                name: '',\r\n                url: ''\r\n            }\r\n        }\r\n    ],\r\n    held_items: [\r\n        {\r\n            item: {\r\n                name: '',\r\n                url: ''\r\n            },\r\n            version_details: [\r\n                {\r\n                    rarity: '',\r\n                    version: {\r\n                        name: '',\r\n                        url: ''\r\n                    }\r\n                }\r\n            ]\r\n        }\r\n    ],\r\n    location_area_encounters: '',\r\n    moves: [\r\n        {\r\n            move: {\r\n                name: '',\r\n                url: ''\r\n            },\r\n            version_group_details: [\r\n                {\r\n                    level_learned_at: 0,\r\n                    version_group: {\r\n                        name: '',\r\n                        url: ''\r\n                    },\r\n                    move_learn_method: {\r\n                        name: '',\r\n                        url: ''\r\n                    }\r\n                }\r\n            ]\r\n        }\r\n    ],\r\n    species: {\r\n        name: '',\r\n        url: ''\r\n    },\r\n    sprites: {\r\n        back_female: '',\r\n        back_shiny_female: '',\r\n        back_default: 'string',\r\n        front_female: '',\r\n        front_shiny_female: '',\r\n        back_shiny: '',\r\n        front_default: '',\r\n        front_shiny: '',\r\n        other: {\r\n            dream_world: '',\r\n            \"official-artwork\": {front_default: ''}\r\n        },\r\n        versions: {\r\n            \" generation-i\": {\r\n                \"red-blue\": {},\r\n                yellow: {},\r\n            },\r\n            \"generation-ii\": {\r\n                crystal: {},\r\n                gold: {},\r\n                silver: {},\r\n            },\r\n            \"generation-iii\": {\r\n                emerald: {},\r\n                \"firered-leafgreen\": {},\r\n                \"ruby-sapphire\": {},\r\n            },\r\n            \"generation-iv\": {\r\n                \"diamond-pearl\": {},\r\n                \"heartgold-soulsilver\": {},\r\n                platinum: {},\r\n            },\r\n            \"generation-v\": {\r\n                \"black-white\": {},\r\n            },\r\n            \"generation-vi\": {\r\n                \"omegaruby-alphasapphire\": {},\r\n                \"x-y\": {},\r\n            },\r\n            \"generation-vii\": {\r\n                icons: {},\r\n                \"ultra-sun-ultra-moon\": {},\r\n            },\r\n            \"generation-viii\": {\r\n                icons: {},\r\n            }\r\n        }\r\n    },\r\n    stats: [\r\n        {\r\n            base_stat: 0,\r\n            effort: 0,\r\n            stat: {\r\n                name: '',\r\n                url: '',\r\n            }\r\n        }\r\n    ],\r\n    types: [\r\n        {\r\n            slot: 0,\r\n            type: {\r\n                name: '',\r\n                url: '',\r\n            }\r\n        }\r\n    ]\r\n}\r\n\r\nexport type PokemonStateType = typeof PokemonInitialState\r\n\r\nexport const PokemonReducer = (state = PokemonInitialState, actions: PokemonActionTypes): PokemonStateType => {\r\n\r\n    switch (actions.type) {\r\n        case \"POKEMON/SET-POKEMON-DATA\": {\r\n            return {...actions.Data}\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n\r\n}\r\n\r\nexport const SetPokemonData = (Data: PokemonStateType) => {\r\n    return {\r\n        type: 'POKEMON/SET-POKEMON-DATA', Data\r\n    } as const\r\n}\r\n\r\n\r\ntype SetPokemonDataType = ReturnType<typeof SetPokemonData>\r\n\r\ntype PokemonActionTypes = SetPokemonDataType\r\n\r\nexport const GetPokemon = (name: string) => {\r\n    return (dispatch: Dispatch<any>) => {\r\n        PokeApi.PokemonGet(name).then(response => {\r\n            if (response.status === 200) {\r\n                dispatch(SetPokemonData(response.data))\r\n            }\r\n        })\r\n            .catch(e => dispatch(SetError(e.message)))\r\n            .finally(() => dispatch(PokemonToggleIsFetching(false)))\r\n    }\r\n}","import React, {useEffect} from \"react\"\r\nimport {Button, Card, Row, Space} from \"antd\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../Redux/Store\";\r\nimport { GetPokemon, PokemonStateType} from \"../../Redux/PokemonReducer\";\r\nimport {Link, useParams} from \"react-router-dom\";\r\nimport {routeLinks} from \"../../Common/routes\";\r\n\r\nexport const Pokemon = () => {\r\n\r\n    let name: { name: string } = useParams()\r\n\r\n    const Pokemon = useSelector<AppStateType, PokemonStateType>(state => state.pokemon)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(GetPokemon(name.name))\r\n    }, [name.name])\r\n\r\n    let ImgUrl = Pokemon.sprites ? Pokemon.sprites.other[\"official-artwork\"].front_default : ''\r\n\r\n    return (\r\n        <>\r\n            <Row justify='center'><Card\r\n                style={{textAlign: \"center\"}}\r\n                // cover={<img src={ImgUrl} alt=\"PokemonIMG\"/>}\r\n                loading={ImgUrl === ''}\r\n                title={Pokemon.name}\r\n                type='inner'\r\n            >\r\n                <Row><img src={ImgUrl} alt=\"PokemonIMG\"/>\r\n                    <Space direction={\"vertical\"} size={1}>\r\n                        <Card title='Abilities' style={{textAlign: \"center\"}} className=\"gutter-row\">\r\n                            {Pokemon.abilities.map((i, index) => <div key={index}>{i.ability.name}</div>)}\r\n                        </Card>\r\n                        <Card title='Base experience' style={{textAlign: \"center\"}}>\r\n                            {Pokemon.base_experience}\r\n                        </Card>\r\n                        <Card title='Height' style={{textAlign: \"center\"}}>\r\n                            {Pokemon.height}\r\n                        </Card>\r\n                        <Card title='Weight' style={{textAlign: \"center\"}}>\r\n                            {Pokemon.weight}\r\n                        </Card>\r\n                    </Space>\r\n                </Row>\r\n\r\n                <Row justify=\"space-between\">\r\n                    <Button title='next' type={\"primary\"}\r\n                            style={{\r\n                                backgroundColor: \"#dbdada\",\r\n                                color: 'black',\r\n                                border: '1px solid black',\r\n                            }}>\r\n\r\n                        <Link\r\n                            to={routeLinks.pokemon + `${Pokemon.id - 1 === 0 ? 1 : Pokemon.id - 1}`}>\r\n                            previous\r\n                        </Link>\r\n\r\n                    </Button>\r\n\r\n                    <Button title='next' type={\"primary\"}\r\n                            style={{\r\n                                backgroundColor: \"#dbdada\",\r\n                                color: 'black',\r\n                                border: '1px solid black'\r\n                            }}>\r\n\r\n                        <Link to={routeLinks.pokemon + (Pokemon.id + 1)}>\r\n                            nextBeast\r\n                        </Link>\r\n\r\n                    </Button>\r\n                </Row>\r\n\r\n            </Card>\r\n            </Row>\r\n        </>)\r\n\r\n}","import React, {useEffect} from 'react';\nimport 'antd/dist/antd.css'\nimport './App.css';\nimport {Breadcrumb, Button, Layout, Menu} from \"antd\";\nimport {MainPage} from \"./components/MainPage/MainPage\";\nimport {Link, Route, Switch, useLocation} from \"react-router-dom\";\nimport {Pokemon} from \"./components/Pokemon/Pokemon\";\nimport {useDispatch} from \"react-redux\";\nimport {InitializeApp} from \"./Redux/AppReducer\";\nimport {routeLinks, routes} from './Common/routes';\n\nconst {SubMenu} = Menu;\nconst {Header, Content, Footer, Sider} = Layout;\n\nfunction App() {\n\n    // const appProps = useSelector<AppStateType>(state => state.app)\n\n    const url = useLocation()\n\n    const dispatch = useDispatch()\n    useEffect(() => {\n        dispatch(InitializeApp())\n    }, [dispatch])\n\n    return <div>\n        <Layout>\n            <Header className=\"header\">\n                <div className=\"logo\"/>\n                <Menu\n                    theme=\"dark\"\n                    mode=\"horizontal\"\n                    selectedKeys={[`${url.pathname === \"/mainPage\"||url.pathname === \"/\"\n                        ? \"/mainPage\" : \"/Pokemon/\"}`]}\n                >\n                    <Menu.Item key=\"/mainPage\"><Link to={routeLinks.mainPage}/>Main Page</Menu.Item>\n                    <Menu.Item key=\"/Pokemon/\"><Link to={routeLinks.defaultPokemon}/>Pokemon page</Menu.Item>\n                </Menu>\n            </Header>\n            <Content style={{padding: '0 50px'}}>\n                <Layout className=\"site-layout-background\" style={{padding: '24px 0'}}>\n                    <Content style={{padding: '0 5px', minHeight: 280}}>\n                        <Switch>\n                            <Route exact path={routes.default}\n                                   render={() => <MainPage/>}/>\n                            <Route exact path={routes.mainPage}\n                                   render={() => <MainPage/>}/>\n                            <Route exact path={routes.pokemon}\n                                   render={() => <Pokemon/>}/>\n                            <Route path={routes.notfound}\n                                   render={() => <div>ERROR 404 NOT FOUND</div>}/>\n                        </Switch>\n                    </Content>\n                </Layout>\n            </Content>\n            <Footer style={{textAlign: 'center'}}>Ant Design ©2018 Created by Ant UED</Footer>\n        </Layout>\n    </div>\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import {combineReducers, createStore, applyMiddleware} from 'redux'\r\nimport thunk from \"redux-thunk\";\r\nimport {PokemonsReducers} from \"./PokemonsReducer\";\r\nimport {AppReducer} from \"./AppReducer\";\r\nimport { PokemonReducer } from './PokemonReducer';\r\nimport {CardReducer} from \"./CardReducer\";\r\n\r\nconst RootReducer = combineReducers(\r\n    {\r\n        pokemons: PokemonsReducers,\r\n        app:AppReducer,\r\n        pokemon:PokemonReducer,\r\n        card: CardReducer\r\n    }\r\n)\r\n\r\nexport type AppStateType = ReturnType<typeof RootReducer>\r\n\r\nexport const AppState = createStore(RootReducer, applyMiddleware(thunk))\r\n\r\n\r\n// @ts-ignore\r\nwindow.AppState = AppState","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport {AppState} from \"./Redux/Store\";\nimport { HashRouter} from \"react-router-dom\";\n\nReactDOM.render(\n        <HashRouter>\n            <Provider store={AppState}>\n                <App/>\n            </Provider>\n        </HashRouter>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}